from datetime import datetime
from typing import List, Dict, Optional, Set


# ---------------------------
# Modelos (Classes principais)
# ---------------------------

class Comment:
    def __init__(self, author: "User", content: str) -> None:
        self.author = author
        self.content = content
        self.created_at = datetime.now()

    def __str__(self) -> str:
        ts = self.created_at.strftime("%d/%m %H:%M")
        return f"{self.author.username} comentou ({ts}): {self.content}"


class Post:
    _next_id = 1

    def __init__(self, author: "User", content: str) -> None:
        self.id = Post._next_id
        Post._next_id += 1

        self.author = author
        self.content = content
        self.created_at = datetime.now()
        self.likes: Set["User"] = set()
        self.comments: List[Comment] = []

    def like(self, user: "User") -> None:
        if user in self.likes:
            self.likes.remove(user)  # alterna curtir/descurtir
        else:
            self.likes.add(user)

    def add_comment(self, user: "User", content: str) -> None:
        self.comments.append(Comment(user, content))

    def __str__(self) -> str:
        ts = self.created_at.strftime("%d/%m %H:%M")
        return (
            f"Post #{self.id} por @{self.author.username} ({ts})\n"
            f"  {self.content}\n"
            f"  ‚ù§ {len(self.likes)} | üí¨ {len(self.comments)}"
        )


class User:
    def __init__(self, username: str, email: str, password: str) -> None:
        self.username = username
        self.email = email
        self._password = password  # simplificado
        self.bio: str = ""
        self.followers: Set["User"] = set()
        self.following: Set["User"] = set()
        self.posts: List[Post] = []

    def check_password(self, password: str) -> bool:
        return self._password == password

    def create_post(self, content: str) -> Post:
        post = Post(self, content)
        self.posts.append(post)
        return post

    def follow(self, other: "User") -> None:
        if other is self:
            print("Voc√™ n√£o pode seguir a si mesmo.")
            return
        if other in self.following:
            print(f"Voc√™ j√° segue @{other.username}.")
            return
        self.following.add(other)
        other.followers.add(self)

    def unfollow(self, other: "User") -> None:
        if other in self.following:
            self.following.remove(other)
            other.followers.discard(self)
        else:
            print(f"Voc√™ n√£o segue @{other.username}.")

    def timeline(self) -> List[Post]:
        posts = list(self.posts)
        for u in self.following:
            posts.extend(u.posts)
        posts.sort(key=lambda p: p.created_at, reverse=True)
        return posts

    def __hash__(self) -> int:
        return hash(self.username)

    def __eq__(self, other: object) -> bool:
        return isinstance(other, User) and self.username == other.username

    def __str__(self) -> str:
        return f"@{self.username} ‚Äî {len(self.followers)} seguidores, {len(self.following)} seguindo"


class SocialNetwork:
    def __init__(self, name: str) -> None:
        self.name = name
        self.users: Dict[str, User] = {}
        self.current_user: Optional[User] = None

    # ---------- Usu√°rios ----------
    def create_user(self, username: str, email: str, password: str) -> bool:
        if username in self.users:
            print("Nome de usu√°rio j√° existe.")
            return False
        self.users[username] = User(username, email, password)
        print(f"Usu√°rio @{username} criado com sucesso!")
        return True

    def login(self, username: str, password: str) -> bool:
        user = self.users.get(username)
        if not user:
            print("Usu√°rio n√£o encontrado.")
            return False
        if not user.check_password(password):
            print("Senha incorreta.")
            return False
        self.current_user = user
        print(f"Bem-vindo(a), @{user.username}!")
        return True

    def logout(self) -> None:
        if self.current_user:
            print(f"At√© logo, @{self.current_user.username}!")
            self.current_user = None

    # ---------- Posts ----------
    def create_post(self, content: str) -> None:
        if not self.current_user:
            print("Fa√ßa login para postar.")
            return
        post = self.current_user.create_post(content.strip())
        print(f"Post criado: #{post.id}")

    def like_post(self, post_id: int) -> None:
        if not self.current_user:
            print("Fa√ßa login para curtir.")
            return
        post = self._find_post(post_id)
        if not post:
            print("Post n√£o encontrado.")
            return
        post.like(self.current_user)
        estado = "curtido" if self.current_user in post.likes else "descurtido"
        print(f"Post #{post.id} {estado}.")

    def comment_post(self, post_id: int, content: str) -> None:
        if not self.current_user:
            print("Fa√ßa login para comentar.")
            return
        post = self._find_post(post_id)
        if not post:
            print("Post n√£o encontrado.")
            return
        post.add_comment(self.current_user, content.strip())
        print(f"Coment√°rio adicionado no post #{post.id}.")

    def _find_post(self, post_id: int) -> Optional[Post]:
        for u in self.users.values():
            for p in u.posts:
                if p.id == post_id:
                    return p
        return None

    # ---------- Social ----------
    def follow(self, username: str) -> None:
        if not self.current_user:
            print("Fa√ßa login para seguir algu√©m.")
            return
        user = self.users.get(username)
        if not user:
            print("Usu√°rio n√£o encontrado.")
            return
        self.current_user.follow(user)

    def unfollow(self, username: str) -> None:
        if not self.current_user:
            print("Fa√ßa login para deixar de seguir algu√©m.")
            return
        user = self.users.get(username)
        if not user:
            print("Usu√°rio n√£o encontrado.")
            return
        self.current_user.unfollow(user)

    # ---------- Visualiza√ß√£o ----------
    def show_feed(self) -> None:
        if not self.current_user:
            print("Fa√ßa login para ver seu feed.")
            return
        posts = self.current_user.timeline()
        if not posts:
            print("Seu feed est√° vazio.")
            return
        for p in posts:
            print("-" * 40)
            print(p)
            for c in p.comments:
                print("   ", c)
        print("-" * 40)


# ---------------------------
# Interface simples
# ---------------------------

def menu_publico(app: SocialNetwork):
    print(f"\n=== {app.name} (n√£o logado) ===")
    print("1) Criar conta")
    print("2) Login")
    print("0) Sair")
    op = input("> ").strip()
    if op == "1":
        u = input("@usuario: ")
        e = input("email: ")
        s = input("senha: ")
        app.create_user(u, e, s)
    elif op == "2":
        u = input("@usuario: ")
        s = input("senha: ")
        app.login(u, s)
    elif op == "0":
        raise SystemExit


def menu_logado(app: SocialNetwork):
    u = app.current_user
    print(f"\n=== {app.name} (logado como @{u.username}) ===")
    print("1) Postar")
    print("2) Feed")
    print("3) Curtir post")
    print("4) Comentar post")
    print("5) Seguir algu√©m")
    print("6) Deixar de seguir")
    print("7) Logout")
    print("0) Sair")
    op = input("> ").strip()
    if op == "1":
        c = input("Escreva seu post: ")
        app.create_post(c)
    elif op == "2":
        app.show_feed()
    elif op == "3":
        pid = int(input("ID do post: "))
        app.like_post(pid)
    elif op == "4":
        pid = int(input("ID do post: "))
        txt = input("Coment√°rio: ")
        app.comment_post(pid, txt)
    elif op == "5":
        alvo = input("@usuario: ")
        app.follow(alvo)
    elif op == "6":
        alvo = input("@usuario: ")
        app.unfollow(alvo)
    elif op == "7":
        app.logout()
    elif op == "0":
        raise SystemExit


# ---------------------------
# Ponto de entrada
# ---------------------------

def main():
    app = SocialNetwork("MiniRede")
    while True:
        if app.current_user is None:
            menu_publico(app)
        else:
            menu_logado(app)


if __name__ == "__main__":
    main()